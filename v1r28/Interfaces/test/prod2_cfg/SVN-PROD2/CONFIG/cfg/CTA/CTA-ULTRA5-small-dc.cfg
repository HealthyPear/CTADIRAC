#ifndef HAVE_ULTRA5_COMMON
# include <CTA-ULTRA5-common.cfg>
#endif

#ifndef TELESCOPE
  echo
  echo Simulating an array of (7 m) DC-SST telescopes with PMTs
  trigger_telescopes = 1  % Not realistic but necessary for merging with other telescope types to maintain mixed stereo triggers.
# ifdef NUM_TELESCOPES
   % Need work-around for preprocessor comparison problem with underscores in variable names.
#  define NUMTEL $(NUM_TELESCOPES)
#  if NUMTEL > 59
    % Make sure that the 'ignore_telescopes' instruction is not used when simulating just a small sub-array.
#   ifndef SUBARRAY_EXTRACTED
     echo Ignoring all telescopes except for no. 60 to 96.
     ignore_telescopes 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59, 97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197
#   endif
#  endif
# endif
#endif

#ifdef TELESCOPE
echo
echo *******************************************************************
echo Configuration for DC-SST telescope $(TELESCOPE) in CTA-ULTRA5 setup
echo *******************************************************************
echo
#endif

#define TELESCOPE_TYPE 3

store_photoelectrons = 21 % Save individual photo-electrons

% ------------------------- Optical parameters --------------------------

parabolic_dish      = 0        % Using Davies-Cotton
focal_length        = 1120     % Effective focal length for camera
mirror_focal_length = 1120     % One fixed focal length despite parabolic dish.
dish_shape_length   = 1120     % Fixed by construction.

#ifdef PERFECT_DISH
  % If all mirrors are just perfect:
  random_focal_length            = 0.
  mirror_reflection_random_angle = 0.0
  mirror_align_random_distance   = 0.0
  mirror_align_random_horizontal = 0.0,0.,0.,0.
  mirror_align_random_vertical   = 0.0,0.,0.,0.
#else
  % Better try to use a realistic configuration:
  random_focal_length =            5.0 % cm
  mirror_reflection_random_angle = 0.0066 % deg.
  mirror_align_random_distance   = 2.0 % cm
  mirror_align_random_horizontal = 0.0035,28.,0.023,0.0
  mirror_align_random_vertical   = 0.0034,28.,0.010,0.0
#endif

mirror_list         = mirror_CTA-HE.dat
mirror_offset       = 0.       % 0.: Axes crossing at dish center.
focus_offset        = 1.4      % 1./(1./1120.-1./9.e5)-1120.

mirror_reflectivity = ref_AlSiO2HfO2.dat % Better reflectivity than a new HESS-1 telescope
telescope_transmission = 0.90 % Just a guess, as there is no such design

% Accuracy of the tracking and measurement of current direction.
telescope_random_angle         = 0.
telescope_random_error         = 0.

% -------------------------- Camera ------------------------------

camera_body_diameter = 200   % cm (only for shadowing)

camera_config_file = camera_CTA-7m-DC-SST_9deg.dat
#ifdef ONLY_MAJORITY
camera_config_file   = camera_CTA-7m-DC-SST_9deg_majority.dat % one size fits both ?
#define NO_ANALOG_SUM 1
#define NO_DIGITAL_SUM 1
#endif
#ifdef ONLY_ANALOG_SUM
camera_config_file   = camera_CTA-7m-DC-SST_9deg_analogsum.dat % one size fits both ?
#define NO_MAJORITY 1
#define NO_DIGITAL_SUM 1
#endif
#ifdef ONLY_DIGITAL_SUM
camera_config_file   = camera_CTA-7m-DC-SST_9deg_digitalsum.dat % one size fits both ?
#define NO_MAJORITY 1
#define NO_ANALOG_SUM 1
#endif
% camera_config_file = camera_CTA-ULTRA1-small_9deg_3trig.dat
camera_transmission = 0.8956 % By plexiglass window only (mean impact on Cherenkov spectrum)
camera_pixels      = 1141 % Modular camera needs more pixels than circular one.
% camera_pixels      = 1069 % Fewer pixels than in prod-1 but same as in subset I.
#include <pmt_specs_R11920.cfg>

min_photons = 100            % With fewer photons don't waste CPU time.
min_photoelectrons = 10      % Usually, more than 60 p.e. are required.

% NSB scaled from 0.100 for HESS with geometrical factor 
%   (37.2/106.4)  * (4.9/4.1)**2 * (15.0/11.2)**2 * (0.90/0.89) = 0.90578
% and spectral factor 
%   128.474/88.284 = 1.4552 for Aar, 134.320/88.284 = 1.52145 for Leoncito
% of a telescope with Al(SiO2HfO2) coated mirrors, plexiglass window, HESS-like funnels, R11920 PMTs.
nightsky_background = all:0.1378 % for Leoncito site candidate
# ifdef TWICE_NSB
   nightsky_background = all:0.2756 % for Leoncito site candidate (factor 2)
# endif
# ifdef THREEFOLD_NSB
   nightsky_background = all:0.4134 % for Leoncito site candidate (factor 3)
# endif

#ifdef ATMOSPHERE_AAR
nightsky_background = all:0.1318 % for Aar site candidate
# ifdef TWICE_NSB
   nightsky_background = all:0.2636 % for Aar site candidate (factor 2)
# endif
# ifdef THREEFOLD_NSB
   nightsky_background = all:0.3954 % for Aar site candidate (factor 3)
# endif
#endif

% --------------------------- Trigger -----------------------------------

% The trigger simulation is over a slightly larger time window than FADC signals.
disc_bins = 50  % Number of time intervals simulated for trigger.
disc_start = 3  % How many intervals the trigger simulation starts before the ADC.

% The camera config file has majority, analog sum, plus digital sum.
#ifndef NO_ANALOG_SUM
# define ANALOG_SUM 1
#endif
#ifndef NO_DIGITAL_SUM
# define DIGITAL_SUM 1
#endif

% Majority & analog sum input pulses:
discriminator_pulse_shape=pulse_CTA-Fx.dat % 2.9 ns FWHM + 300 MHz bandwidth -> 3.1 ns FWHM
discriminator_amplitude = 20. % mV for mean p.e. amplitude

% Discriminator threshold (and corresponding multiplicity for telescope trigger):
trigger_pixels = 3             % This means actually a level of 2.5 pixels.
#ifdef NEW_MAJORITY_THRESHOLDS
  discriminator_threshold = 126.6 % mV on average (6.33 mean p.e., NSB(2x) = 1.5*proton rate) at trigger_pixels = 3 
#else
  discriminator_threshold = 128 % mV on average (6.40 mean p.e., NSB(2x) = 1.5*proton rate)
#endif
#ifdef TWICE_NSB
   discriminator_threshold = 149.8 % mV on average (7.49 mean p.e., NSB(3x) = 1.5*proton rate) at trigger_pixels = 3 
#endif
#ifdef THREEFOLD_NSB
   discriminator_threshold = 167.2 % mV on average (8.36 mean p.e., NSB(4x) = 1.5*proton rate) at trigger_pixels = 3 
#endif
discriminator_var_threshold = 5 % mV channel-to-channel variation

% Discriminator switching parameters:
discriminator_time_over_threshold    = 0.5
discriminator_var_time_over_threshold= 0
discriminator_sigsum_over_threshold  = 0 % pVs
discriminator_var_sigsum_over_threshold  = 0 % pVs
discriminator_hysteresis             = 4.8 % mV

% Outputs from pixel 'logic':
discriminator_gate_length            = 6.0
discriminator_var_gate_length        = 0
discriminator_output_amplitude   =     42  % mV
discriminator_output_var_percent = 5       % is 10% for HESS
discriminator_rise_time = 0.5              % is 1ns for HESS
discriminator_fall_time = 0.5              % is 1ns for HESS

% Telescope trigger (specified even if no majority trigger is used, see also 'trigger_pixels' above):
default_trigger = Majority
teltrig_min_time                       0.5 % ns
teltrig_min_sigsum                     7.8 % pV.s

trigger_delay_compensation = 0,-1,3

#ifdef ANALOG_SUM
   echo Analog sum trigger threshold depends on DC subtraction (2013-04-28 and newer sim_telarray)
%  default_trigger = AnalogSum
%  asum_threshold = 1227 % mV (61.3 "mean" p.e. for NSB(2*) = 1.5*proton rate) % Without DC subtraction
%  asum_clipping = 400  % mV (20 "mean" p.e.) % Without DC subtraction
  asum_threshold = 742 % mV (37.1 "mean" p.e. for NSB(2*) = 1.5*proton rate)
  asum_clipping = 300  % mV (15 "mean" p.e.)
# ifdef TWICE_NSB
%  asum_threshold = 1524 % mV (76.2 "mean" p.e. for NSB(3*) = 1.5*proton rate) % Without DC subtraction
  asum_threshold = 902 % mV (45.1 "mean" p.e. for NSB(3*) = 1.5*proton rate)
  asum_clipping = 400 % mV (20 "mean" p.e.)
# endif
# ifdef THREEFOLD_NSB
%  asum_threshold = 1810 % mV (90.5 "mean" p.e. for NSB(4*) = 1.5*proton rate) % Without DC subtraction
  asum_threshold = 976 % mV (48.8 "mean" p.e. for NSB(3*) = 1.5*proton rate)
  asum_clipping = 400 % mV (20 "mean" p.e.)
# endif
  % asum_shaping_file = CTA-ULTRA5-asum_shaping.dat
  asum_shaping_file = none
  asum_offset = 0.0
#endif

#ifdef DIGITAL_SUM
%  default_trigger = DigitalSum
# ifdef OLD_DSUM_THRESHOLD
  % dsum_threshold = 175 % ADC counts (35 "mean" p.e. for 100 Hz on dark NSB)
  dsum_threshold = 200 % ADC counts (39.9 "mean" p.e. for NSB(2*) = 1.5*proton rate)
  dsum_clipping = 50 % ADC counts (10.0 "mean" p.e.)
# else
  dsum_threshold = 224 % ADC counts (44.7 "mean" p.e. for NSB(2*) = 1.5*proton rate)
  dsum_clipping = 75 % ADC counts (150. "mean" p.e.)
# endif
# ifdef TWICE_NSB
  dsum_threshold = 255 % ADC counts (51.0 "mean" p.e. for NSB(3*) = 1.5*proton rate)
  dsum_clipping = 100 % ADC counts (20.0 "mean" p.e.)
# endif
# ifdef THREEFOLD_NSB
  dsum_threshold = 283 % ADC counts (56.5 "mean" p.e. for NSB(4*) = 1.5*proton rate)
  dsum_clipping = 100 % ADC counts (20.0 "mean" p.e.)
# endif
  % dsum_shaping_file = CTA-ULTRA5-dsum_shaping.dat
  dsum_shaping_file = none % No further shaping needed - pulse is more or less OK.
  dsum_offset = 0.0
#endif

% only_triggered_arrays=0
only_triggered_telescopes=1

% ------------------------------ Readout --------------------------------

% Sampling rate in MHz:
fadc_MHz = 500 % MHz sampling rate

fadc_pulse_shape = pulse_CTA-M.dat % Medium sampling pulse shape

% Read-out of a 80 ns window (within simulated 100 ns) following the actual trigger:
fadc_bins = 50       % Number of time intervals simulated for ADC.
fadc_sum_bins = 40   % Number of ADC time intervals actually summed up.
fadc_sum_offset = 8  % How many intervals summation starts before telescope trigger.

fadc_pedestal = 100          % Per time slice (positive signals only: unsigned!)
fadc_amplitude = 5.0        % The peak amplitude in a time slice for high gain.
fadc_noise = 1.5            % Again per time slice (high gain).

#ifdef WITH_LOW_GAIN_CHANNEL
  echo
  Error Using a dual-gain configuration instead of a single gain channel per pixel.
  echo 
  fadc_lg_amplitude = 0.5      % The peak amplitude in a time slice for low gain.
  fadc_lg_noise = 1.0          % Again per time slice (low gain).
#endif

% ----------------------------- Analysis --------------------------------

% Pulse shape analysis with pulse sum around global peak
% position only for significant pixels.
pulse_analysis = -13
# ifdef TWICE_NSB
   pulse_analysis = -18
# endif
# ifdef THREEFOLD_NSB
   pulse_analysis = -23
# endif

% Pulse analysis provides a conditional 16 ns integration at 500 MHz sampling rate.
sum_before_peak = 3
sum_after_peak = 4

tailcut_scale = 1.8 % For built-in image cleaning
# ifdef TWICE_NSB
   tailcut_scale = 2.5
# endif
# ifdef THREEFOLD_NSB
   tailcut_scale = 3.1
# endif

