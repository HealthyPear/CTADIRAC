discriminator_pulse_shape = hess2_comp_shape-v1.dat

% Pulse shape analysis with pulse sum around global peak
% position only for significant pixels.
pulse_analysis = -30
sum_before_peak = 3
sum_after_peak = 4

discriminator_threshold = 99999
asum_threshold = 99999
dsum_threshold = 99999

% Unless specified otherwise we use thresholds for 100 Hz on dark sky
#define T100
#ifdef T10K2
# undef T100
#endif
#ifdef T1K2
# undef T100
#endif
#ifdef T1K
# undef T100
#endif
#ifdef T10K
# undef T100
#endif

% Mirror reflectivity options:
mirror_reflectivity = hess_reflect.dat
#ifdef REF0
mirror_reflectivity = hess_reflect.dat
#endif
#ifdef REF1
mirror_reflectivity = ref_AlSiO2.dat
#endif
#ifdef REF2
mirror_reflectivity = ref_AlSiO2HfO2.dat
#endif
#ifdef REF3
mirror_reflectivity = ref_colddielectric.dat
#endif
#ifdef REF4
mirror_reflectivity = ref_dielectric550.dat
#endif
#ifdef REF5
mirror_reflectivity = ref_silver.dat
#endif
#ifdef REF6
mirror_reflectivity = ref_dielectric500.dat
#endif

#ifdef ARNO_1
   echo Special ARNO_1 production production configuration
   output_format = 1 % Sample mode
   default_trigger = Majority
   trigger_pixels = 3
   discriminator_pulse_shape = hess2_comp_shape-v1.dat
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0.5,0,0 % LST
#  else
      trigger_delay_compensation = 2.2,0,0 % MST
#  endif
   tailcut_scale = 2.0
   min_photons = 120
#  ifdef MHZ250
      fadc_mhz=250
      fadc_pulse_shape=pulse_FlashCam_raw.dat
      fadc_bins=25
      fadc_sum_bins=25
      fadc_sum_offset=0
      fadc_noise=1.0
      fadc_lg_noise=0.25
      disc_bins=25
      disc_start=0
#  else
#     ifdef GHZ
         fadc_bins=60
         fadc_sum_bins=60
         fadc_sum_offset=0
         disc_bins=60
         disc_start=0
#     else
	 error Invalid configuration: use either MHZ250 or GHZ definition
#     endif
#  endif
#endif

% ================== ND/NC series: SmartPixel majority logic (7-pixel groups)  ============================

#ifdef ND2
# define ND_SERIES 2
#endif
#ifdef ND3
# define ND_SERIES 3
#endif
#ifdef ND4
# define ND_SERIES 4
#endif
#ifdef ND5
# define ND_SERIES 5
#endif

#ifdef ND3X15
# define NDX15_SERIES 3
#endif
#ifdef ND3X20
# define NDX20_SERIES 3
#endif

#ifdef NC3
# define NC_SERIES 3
#endif
#ifdef NC3X15
# define NCX15_SERIES 3
#endif
#ifdef NC3X20
# define NCX20_SERIES 3
#endif

#ifdef ND_SERIES
   echo Trigger conditions using ND series with multiplicity $(ND_SERIES).
   default_trigger = Majority
   trigger_pixels = $(ND_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1.dat
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0.5,0,0 % LST
#  else
      trigger_delay_compensation = 2.2,0,0 % MST
#  endif
#endif
#ifdef NDX15_SERIES
   echo Trigger conditions using NDX15 series with multiplicity $(NDX15_SERIES).
   default_trigger = Majority
   trigger_pixels = $(NDX15_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1x1.5.dat
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 1.5,0,0 % LST
#  else
      trigger_delay_compensation = 3.2,0,0 % MST
#  endif
#endif
#ifdef NDX20_SERIES
   echo Trigger conditions using NDX20 series with multiplicity $(NDX20_SERIES).
   default_trigger = Majority
   trigger_pixels = $(NDX20_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1x2.0.dat
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 3.0,0,0
#  else
      trigger_delay_compensation = 4.7,0,0
#  endif
#endif
#ifdef NC_SERIES
   echo Trigger conditions using NC series with multiplicity $(NC_SERIES).
   default_trigger = Majority
   trigger_pixels = $(NC_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1.dat
   transit_time_jitter  = 0.7  % PMT single p.e. transit time jitter r.m.s. [ns].
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0.6,0,0
#  else
      trigger_delay_compensation = 2.3,0,0
#  endif
#endif
#ifdef NCX15_SERIES
   echo Trigger conditions using NCX15 series with multiplicity $(NCX15_SERIES).
   default_trigger = Majority
   trigger_pixels = $(NCX15_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1x1.5.dat
   transit_time_jitter  = 0.7  % PMT single p.e. transit time jitter r.m.s. [ns].
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 1.6,0,0
#  else
      trigger_delay_compensation = 3.3,0,0
#  endif
#endif
#ifdef NCX20_SERIES
   echo Trigger conditions using NCX20 series with multiplicity $(NCX20_SERIES).
   default_trigger = Majority
   trigger_pixels = $(NCX20_SERIES)
   discriminator_threshold = 99999
   discriminator_pulse_shape = hess2_comp_shape-v1x2.0.dat
   transit_time_jitter  = 0.7  % PMT single p.e. transit time jitter r.m.s. [ns].
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 3.2,0,0
#  else
      trigger_delay_compensation = 4.9,0,0
#  endif
#endif

% ========================== MD series: plain majority logic (with larger trigger groups) =======================

#ifdef MD3
# define MD_SERIES 3
#endif
#ifdef MD4
# define MD_SERIES 4
#endif
#ifdef MD5
# define MD_SERIES 5
#endif

#ifdef MD_SERIES
   default_trigger = Majority
   echo Trigger conditions using MD series with multiplicity $(MD_SERIES).
   trigger_pixels = $(MD_SERIES)
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   discriminator_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0.3,0,0
#  else
      trigger_delay_compensation = 3.0,0,0
#  endif
#endif

% ======================== Analog sum series (different shaping, different clipping) ==========================

% ----- MA series: no shaping --------

#ifdef MA130
# define MA_SERIES 130
#endif

#ifdef MA_SERIES
   echo Trigger conditions using MA series with clipping level $(MA_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = AnalogSum
   asum_shaping_file = none
   asum_clipping = $(MA_SERIES)
   asum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,2.7,0
#  endif
#endif

% ----- AS series: 4 ns FWHM shaping ---------

#ifdef AS0
# define AS_SERIES 0
#endif
#ifdef AS90
# define AS_SERIES 90
#endif
#ifdef AS130
# define AS_SERIES 130
#endif
#ifdef AS200
# define AS_SERIES 200
#endif

#ifdef AS_SERIES
   echo Trigger conditions using AS series with clipping level $(AS_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = AnalogSum
   asum_shaping_file = CTA-ULTRA4-asum_shaping.dat
# ifdef AS0
   asum_clipping = 10000
# else
   asum_clipping = $(AS_SERIES)
# endif
   asum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,2.7,0
#  endif
#endif

% ------ BS series: 8 ns FWHM shaping -------

#ifdef BS0
# define BS_SERIES 0
#endif
#ifdef BS90
# define BS_SERIES 90
#endif
#ifdef BS130
# define BS_SERIES 130
#endif
#ifdef BS200
# define BS_SERIES 200
#endif

#ifdef BS_SERIES
   echo Trigger conditions using BS series with clipping level $(BS_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = AnalogSum
   asum_shaping_file = CTA-ULTRA4-asum_shaping2.dat
# ifdef BS0
   asum_clipping = 10000
# else
   asum_clipping = $(BS_SERIES)
# endif
   asum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,2.7,0
#  endif
#endif

% ------ CS series: 0.7 ns TTJ, 2.5 ns FWHM shaping -------

#ifdef CS0
# define CS_SERIES 0
#endif
#ifdef CS90
# define CS_SERIES 90
#endif
#ifdef CS130
# define CS_SERIES 130
#endif
#ifdef CS200
# define CS_SERIES 200
#endif

#ifdef CS_SERIES
   echo Trigger conditions using CS series with clipping level $(CS_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = AnalogSum
   asum_shaping_file = CTA-ULTRA4-asum_shaping1.dat
   transit_time_jitter = 0.7
# ifdef CS0
   asum_clipping = 10000
# else
   asum_clipping = $(CS_SERIES)
# endif
   asum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,2.7,0
#  endif
#endif

# --------- AN series: like AS series but only over 7 pixels (instead of 19 pixels) groups ----------

#ifdef AN0
# define AN_SERIES 0
#endif
#ifdef AN90
# define AN_SERIES 90
#endif
#ifdef AN130
# define AN_SERIES 130
#endif
#ifdef AN200
# define AN_SERIES 200
#endif

#ifdef AN_SERIES
   echo Trigger conditions using AN series with clipping level $(AN_SERIES).
   camera_config_file = camera_CTA-LST+MST.dat
   default_trigger = AnalogSum
   asum_shaping_file = CTA-ULTRA4-asum_shaping.dat
# ifdef AN0
   asum_clipping = 10000
# else
   asum_clipping = $(AN_SERIES)
# endif
   asum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,2.7,0
#  endif
#endif

% ======================= Digital sum series for 250 MHz ==================================

% ----- DM series: 250 MHz digital sum with running average of two bins -----

#ifdef DM40
# define DM_SERIES 40
#endif
#ifdef DM60
# define DM_SERIES 60
#endif
#ifdef DM90
# define DM_SERIES 90
#endif
#ifdef DM120
# define DM_SERIES 120
#endif
#ifdef DM180
# define DM_SERIES 180
#endif

#ifdef DM_SERIES
   echo Trigger conditions using DM series with clipping level $(DM_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 2
   sum_after_peak = 2
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DM_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-5.5
#  else
      trigger_delay_compensation = 0,0,-4.4
#  endif
#endif

% ----- DN series: 250 MHz digital sum with running average of four bins -----

#ifdef DN60
# define DN_SERIES 60
#endif
#ifdef DN120
# define DN_SERIES 120
#endif

#ifdef DN_SERIES
   echo Trigger conditions using DN series with clipping level $(DN_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 2
   sum_after_peak = 2
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DN_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping2.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-5.5
#  else
      trigger_delay_compensation = 0,0,-4.4
#  endif
#endif

% ----- DO series: like DM series but ignoring amplitudes below about 1.0 p.e. (may be more due to averaging) -----

#ifdef DO60
# define DO_SERIES 60
#endif
#ifdef DO120
# define DO_SERIES 120
#endif

#ifdef DO_SERIES
   echo Trigger conditions using DO series with clipping level 10/$(DO_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 2
   sum_after_peak = 2
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DO_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_ignore_below = 10
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-5.5
#  else
      trigger_delay_compensation = 0,0,-4.4
#  endif
#endif

% ----- DP series: like DM series but ignoring amplitudes below about 2.0 p.e. (may be more due to averaging) -----

#ifdef DP60
# define DP_SERIES 60
#endif
#ifdef DP120
# define DP_SERIES 120
#endif

#ifdef DP_SERIES
   echo Trigger conditions using DP series with clipping level 20/$(DP_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 2
   sum_after_peak = 2
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DP_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_ignore_below = 20
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-5.5
#  else
      trigger_delay_compensation = 0,0,-4.4
#  endif
#endif

% ----- DQ series: 250 MHz digital sum without filtering -----

#ifdef DQ60
# define DQ_SERIES 60
#endif
#ifdef DQ120
# define DQ_SERIES 120
#endif

#ifdef DQ_SERIES
   echo Trigger conditions using DQ series with clipping level $(DQ_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 2
   sum_after_peak = 2
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DQ_SERIES)
   dsum_shaping_file = none
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-4.5
#  else
      trigger_delay_compensation = 0,0,-3.4
#  endif
#endif

% ----- DR series: like DM series using the anticipated raw digitized pulse 
%       shape as starting point, with running average of two intervals -----

#ifdef DR40
# define DR_SERIES 40
#endif
#ifdef DR60
# define DR_SERIES 60
#endif
#ifdef DR90
# define DR_SERIES 90
#endif
#ifdef DR120
# define DR_SERIES 120
#endif
#ifdef DR180
# define DR_SERIES 180
#endif

#ifdef DR_SERIES
   echo Trigger conditions using DR series with clipping level $(DR_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DR_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DK series: like DR series but first clipping then shaping -----

#ifdef DK40
# define DK_SERIES 40
#endif
#ifdef DK60
# define DK_SERIES 60
#endif
#ifdef DK90
# define DK_SERIES 90
#endif
#ifdef DK120
# define DK_SERIES 120
#endif
#ifdef DK180
# define DK_SERIES 180
#endif

#ifdef DK_SERIES
   echo Trigger conditions using DK series with clipping level $(DK_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_pre_clipping = $(DK_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DY series: like DM series but on 7 pixel groups -----

#ifdef DY40
# define DY_SERIES 40
#endif
#ifdef DY60
# define DY_SERIES 60
#endif
#ifdef DY90
# define DY_SERIES 90
#endif
#ifdef DY120
# define DY_SERIES 120
#endif
#ifdef DY180
# define DY_SERIES 180
#endif

#ifdef DY_SERIES
   echo Trigger conditions using DY series with clipping level $(DY_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_CTA_prod1s.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DY_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DZ series: like DR series but on 7 pixel groups -----

#ifdef DZ40
# define DZ_SERIES 40
#endif
#ifdef DZ60
# define DZ_SERIES 60
#endif
#ifdef DZ90
# define DZ_SERIES 90
#endif
#ifdef DZ120
# define DZ_SERIES 120
#endif
#ifdef DZ180
# define DZ_SERIES 180
#endif

#ifdef DZ_SERIES
   echo Trigger conditions using DZ series with clipping level $(DZ_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DZ_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DD series: with raw shape like DR series but apply difference rather than average -----

#ifdef DD40
# define DD_SERIES 40
#endif
#ifdef DD60
# define DD_SERIES 60
#endif
#ifdef DD90
# define DD_SERIES 90
#endif
#ifdef DD120
# define DD_SERIES 120
#endif
#ifdef DD180
# define DD_SERIES 180
#endif

#ifdef DD_SERIES
   echo Trigger conditions using DD series with clipping level $(DD_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DD_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping-diff.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DE series: like DD series but apply difference from next-next (A_i+2 - A_i) -----

#ifdef DE40
# define DE_SERIES 40
#endif
#ifdef DE60
# define DE_SERIES 60
#endif
#ifdef DE90
# define DE_SERIES 90
#endif
#ifdef DE120
# define DE_SERIES 120
#endif
#ifdef DE180
# define DE_SERIES 180
#endif

#ifdef DE_SERIES
   echo Trigger conditions using DE series with clipping level $(DE_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DE_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping-diff2.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ----- DF series: like DD series but apply difference from 3rd-next (A_i+3 - A_i) -----

#ifdef DF40
# define DF_SERIES 40
#endif
#ifdef DF60
# define DF_SERIES 60
#endif
#ifdef DF90
# define DF_SERIES 90
#endif
#ifdef DF120
# define DF_SERIES 120
#endif
#ifdef DF180
# define DF_SERIES 180
#endif

#ifdef DF_SERIES
   echo Trigger conditions using DF series with clipping level $(DF_SERIES).
   fadc_mhz=250
   fadc_pulse_shape = pulse_FlashCam_raw.dat
   fadc_noise = 1.0
   fadc_lg_noise = 0.25
   fadc_bins = 25
   fadc_sum_bins = 15
   sum_before_peak = 3
   sum_after_peak = 3
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DF_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping-diff3.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,-3.5
#  else
      trigger_delay_compensation = 0,0,-2.4
#  endif
#endif

% ============================= Digital sum series for GHz sampling ====================================

% ----- DS series: GHz digital sum with running average of two bins 

#ifdef DS40
# define DS_SERIES 40
#endif
#ifdef DS60
# define DS_SERIES 60
#endif
#ifdef DS90
# define DS_SERIES 90
#endif
#ifdef DS120
# define DS_SERIES 120
#endif
#ifdef DS180
# define DS_SERIES 180
#endif

#ifdef DS_SERIES
   echo Trigger conditions using DS series with clipping level $(DS_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DS_SERIES)
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping.dat
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,0,2.7
#  endif
#endif

% ----- DW series: GHz digital sum with running average of four bins 

#ifdef DW60
# define DW_SERIES 60
#endif
#ifdef DW120
# define DW_SERIES 120
#endif

#ifdef DW_SERIES
   echo Trigger conditions using DW series with clipping level $(DW_SERIES).
   camera_config_file = camera_CTA-LST+MST-nnb.dat
   default_trigger = DigitalSum
   dsum_clipping = $(DW_SERIES) % Used to be 120 by mistake for DW60
   dsum_shaping_file = CTA-ULTRA4-dsum_shaping2.dat
   dsum_threshold = 99999
#  if TELESCOPE_TYPE == 1
      trigger_delay_compensation = 0,0,0
#  else
      trigger_delay_compensation = 0,0,2.7
#  endif
#endif

